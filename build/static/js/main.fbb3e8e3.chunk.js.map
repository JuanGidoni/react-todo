{"version":3,"sources":["components/Form.jsx","components/actions/ToDo.jsx","components/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","input","setInput","todos","setTodos","setStatus","active","statusHandler","setActive","e","preventDefault","target","value","id","type","onChange","placeholder","minLength","maxLength","size","className","onClick","btn","document","getElementById","alertbox","alertBtn","createElement","inputL","length","text","completed","favorite","Math","random","date","Date","innerText","appendChild","setTimeout","removeChild","ToDo","todo","map","item","filter","el","ToDoList","filterTodos","classList","add","key","App","useState","status","setFilterTodos","useEffect","getTodos","filterHandler","localTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fbb3e8e3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Form({input, setInput, todos, setTodos, setStatus, active, setActive}) {\r\n    const inputChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n    const SubmitForm = (e) => {\r\n        let btn = document.getElementById('input-todo');\r\n        let alertbox = document.getElementById('alert');\r\n        let alertBtn = document.createElement('p');\r\n        e.preventDefault();\r\n        let inputL = input.length\r\n        if(inputL >= 4){\r\n            setTodos([\r\n                ...todos,{text: input, completed: false, favorite: false, id: Math.random()*1000, date: new Date(),},\r\n            ]);\r\n            btn.placeholder = 'Add another one...';\r\n            btn.className = 'input-todo';\r\n            alertBtn.innerText = 'ToDo added...';\r\n            alertbox.appendChild(alertBtn);\r\n            setTimeout(() => {\r\n                alertbox.removeChild(alertBtn);\r\n            }, 2000);\r\n\r\n        }else if(inputL <= 3){\r\n            btn.placeholder = 'Text minimum size: 4';\r\n            btn.className = 'error';\r\n        }\r\n        setInput('');\r\n    }\r\n    const statusHandler = (e) => {\r\n        e.preventDefault();\r\n        if(e.target.value === 'all'){\r\n            setStatus('all');\r\n        }else if(e.target.value === 'Important'){\r\n            setStatus('favorite');\r\n        }else if(e.target.value === 'completed'){\r\n            setStatus('completed');\r\n        }else{\r\n            setStatus('uncompleted');\r\n        }\r\n    }\r\n    const deleteAll = (e) => {\r\n        e.preventDefault();\r\n        let alertbox = document.getElementById('alert');\r\n        let alertBtn = document.createElement('p');\r\n        alertBtn.innerText = 'All Deleted...';\r\n        alertbox.appendChild(alertBtn);\r\n        setTimeout(() => {\r\n            alertbox.removeChild(alertBtn);\r\n        }, 2000);\r\n        setTodos([]);\r\n    }\r\n    return (\r\n        <form>\r\n            <div id=\"alert\"></div>\r\n            <input value={input} id=\"input-todo\" type=\"text\" onChange={inputChange} placeholder='Write something...' minLength=\"4\" maxLength=\"16\" size=\"18\" className=\"input-todo\"/>\r\n            <button onClick={SubmitForm} type=\"submit\" className=\"buttonUser\">+</button>\r\n            <div className=\"select d-flex flex-column flex-md-row justify-content-center align-items-center\">\r\n                <button className={`select-button ${active ? \"active\" : ''}`} value=\"all\" onClick={statusHandler} >All</button>\r\n                <button className={`select-button ${active ? \"active\" : ''}`} value=\"completed\" onClick={statusHandler}>Completed</button>\r\n                <button className={`select-button ${active ? \"active\" : ''}`} value=\"Important\" onClick={statusHandler}>Important</button>\r\n                <button className={`select-button ${active ? \"active\" : ''}`} value=\"uncompleted\" onClick={statusHandler}>Uncompleted</button>\r\n            </div>\r\n            <button onClick={deleteAll} className=\"select-button\"><i className=\"fas fa-trash\"></i> All</button>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\n\r\nconst ToDo = ({text, todo, todos, setTodos, id}) => {\r\n\r\n    const deleteTodo = () => {\r\n        setTodos(todos.filter((el) => el.id !== todo.id))\r\n    }\r\n    const completeTodo = () => {\r\n        setTodos(todos.map((item) => {\r\n            if(item.id === todo.id){\r\n                return {\r\n                    ...item, completed: !item.completed\r\n                }\r\n            }\r\n        return item;\r\n        }))\r\n    }\r\n    const importanteTodo = () => {\r\n        setTodos(todos.map((item) => {\r\n            if(item.id === todo.id){\r\n                return {\r\n                    ...item, favorite: !item.favorite\r\n                }\r\n            }\r\n        return item;\r\n        }))\r\n    }\r\n    return(\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : todo.favorite ? \"favorited\" : ''}`}>{text}</li>\r\n            <button onClick={completeTodo} className=\"complete-btn\"><i className=\"fas fa-check\"></i></button>\r\n            <button onClick={importanteTodo} className=\"star-btn\"><i className=\"fas fa-star\"></i></button>\r\n            <button onClick={deleteTodo} className=\"trash-btn\"><i className=\"fas fa-trash\"></i></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDo;","import React from 'react'\r\nimport ToDo from './actions/ToDo'\r\nconst ToDoList = ({todos, setTodos, filterTodos}) => {\r\n\r\n    let emptyTodo = document.createElement('p');\r\n    emptyTodo.classList.add('text-center');\r\n    \r\n    return(\r\n        <div className=\"todo-container text-center\">\r\n            <ul className=\"todo-list\">\r\n                <p className=\"text-white\">\r\n        {todos.length === 0 ? `ToDo List empty..` : ''}\r\n                </p>\r\n                {filterTodos.map(todo => (\r\n                    <ToDo \r\n                    setTodos={setTodos}\r\n                    todos={todos} \r\n                    key={todo.id} \r\n                    text={todo.text} \r\n                    completed={todo.completed} \r\n                    favorite={todo.favorite}\r\n                    id={todo.id} \r\n                    todo={todo} />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDoList;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n// Import Components\nimport Form from './components/Form';\nimport ToDoList from './components/ToDoList'\n\nfunction App() {\n  \n  // State consts \n  const [input, setInput] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filterTodos, setFilterTodos] = useState([]);\n  const [active, setActive] = useState(true);\n\n    // RUN ONCE \n    useEffect(() => {\n      getTodos()\n    }, []);\n\n    useEffect( () => {\n      filterHandler(); \n      localTodos();\n    },[todos,status]);\n\n  // Functions\n  const filterHandler = () => {\n    switch(status){\n      case 'completed':\n        setFilterTodos(todos.filter(todo => todo.completed === true));\n        break;\n        case 'favorite':\n          setFilterTodos(todos.filter(todo => todo.favorite === true));\n          break;\n        case 'uncompleted':\n          setFilterTodos(todos.filter(todo => todo.completed === false));\n          break;\n          default:\n            setFilterTodos(todos);\n            break;\n          }\n    }\n    const localTodos = () => {\n      localStorage.setItem('todos', JSON.stringify(todos));\n  }\n  const getTodos = () => {\n    if(localStorage.getItem('todos') === null){\n      localStorage.setItem('todos', JSON.stringify([]));\n    }else {\n      let todoLocal = JSON.parse(localStorage.getItem('todos', JSON.stringify(todos)));\n      setTodos(todoLocal);\n    }\n  }\n        return (\n    <div className=\"container App\">\n      <div className=\"row\">\n      <div className=\"col-12 col-md-6 col-lg-8 text-center\"> \n        <div className=\"col-12 App-header pt-5 mx-auto\">\n        <p className=\"text-center\">\n          React-ToDo\n        </p>\n        <p className=\"smaller\">Created by <a href=\"https://github.com/JuanGidoni\">Juan Ignacio Gidoni</a></p>\n        </div>\n        <div className=\"d-flex flex-column justify-content-center align-items-center\">\n     <Form \n      input={input}\n      todos={todos}\n      setTodos={setTodos}\n      setInput={setInput}\n      setStatus={setStatus}\n      active={active}\n      setActive={setActive}\n      />\n        </div>\n      </div>\n      <div className=\"col-12 col-md-6 col-lg-4 todoBox pt-5 pt-md-0\">\n        <h2 className=\"text-white text-center input-todo\">ToDo List</h2>\n      <ToDoList \n      filterTodos={filterTodos} \n      setTodos={setTodos} \n      todos={todos} />\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}